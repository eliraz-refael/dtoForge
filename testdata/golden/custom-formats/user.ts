// Generated by DtoForge - DO NOT EDIT
import * as t from 'io-ts';
import { Base64String } from './branded-types';
import { DateString } from './branded-types';
import { DateTimeString } from './branded-types';
import { EmailString } from './branded-types';
import { URLString } from './branded-types';
import { UUID } from './branded-types';


/**
 * User with various formatted fields
 */
// Schema: User
export const UserCodec = t.type({
  // Base64 encoded avatar image
  avatarData: t.union([Base64String, t.undefined]),
  // User's birth date
  birthDate: t.union([DateString, t.undefined]),
  // Account creation timestamp
  createdAt: DateTimeString,
  // User's email address
  email: EmailString,
  // Unique user identifier (UUID)
  id: UUID,
  // URL to user's profile picture
  profilePicture: t.union([URLString, t.undefined]),
});

export type User = t.TypeOf<typeof UserCodec>;

// Validation helper
export const isUser = (value: unknown): value is User =>
  UserCodec.is(value);

// Decode helper with error handling
export const decodeUser = (value: unknown) =>
  UserCodec.decode(value);

// Partial codec for updates (all fields optional)
export const UserPartialCodec = t.partial({
  avatarData: Base64String,
  birthDate: DateString,
  createdAt: DateTimeString,
  email: EmailString,
  id: UUID,
  profilePicture: URLString,
});

export type UserPartial = t.TypeOf<typeof UserPartialCodec>;

