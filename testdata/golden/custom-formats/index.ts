// Generated by DtoForge - DO NOT EDIT
// generated-schemas - OpenAPI Schema Validators

export * from './document';
export * from './event';
export * from './user';


// Re-export io-ts for convenience
export * as t from 'io-ts';
export { isLeft, isRight } from 'fp-ts/Either';

// Utility type for validation results
export type ValidationResult<T> = {
  success: boolean;
  data?: T;
  errors?: string[];
};

// Generic validation helper
export const validateData = <T>(
  codec: t.Type<T, any, unknown>,
  data: unknown
): ValidationResult<T> => {
  const result = codec.decode(data);

  if (isRight(result)) {
    return {
      success: true,
      data: result.right,
    };
  }

  return {
    success: false,
    errors: formatValidationErrors(result.left),
  };
};

// Format io-ts validation errors into readable messages
const formatValidationErrors = (errors: t.Errors): string[] => {
  return errors.map(error => {
    const path = error.context.map(c => c.key).filter(key => key !== '').join('.');
    const expectedType = error.context[error.context.length - 1]?.type?.name || 'unknown';
    const actualValue = error.value;

    return path
      ? `Invalid value at '${path}': expected ${expectedType}, got ${typeof actualValue}`
      : `Invalid value: expected ${expectedType}, got ${typeof actualValue}`;
  });
};

// All available schemas
export const schemas = {
  document: DocumentCodec,
  event: EventCodec,
  user: UserCodec,
};

// Schema names for runtime access
export const schemaNames = [
  'Document',
  'Event',
  'User',
] as const;

export type SchemaName = typeof schemaNames[number];

