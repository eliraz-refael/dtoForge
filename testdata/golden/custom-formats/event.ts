// Generated by DtoForge - DO NOT EDIT
import * as t from 'io-ts';
import { DateString } from './branded-types';
import { DateTimeString } from './branded-types';
import { URLString } from './branded-types';
import { UUID } from './branded-types';


/**
 * System event with timestamps
 */
// Schema: Event
export const EventCodec = t.type({
  // Date of the event (without time)
  eventDate: t.union([DateString, t.undefined]),
  // Event identifier
  eventId: UUID,
  // Related resource URL
  resourceUrl: t.union([URLString, t.undefined]),
  // When the event is scheduled
  scheduledFor: t.union([DateTimeString, t.undefined]),
  // When the event occurred
  timestamp: DateTimeString,
});

export type Event = t.TypeOf<typeof EventCodec>;

// Validation helper
export const isEvent = (value: unknown): value is Event =>
  EventCodec.is(value);

// Decode helper with error handling
export const decodeEvent = (value: unknown) =>
  EventCodec.decode(value);

// Partial codec for updates (all fields optional)
export const EventPartialCodec = t.partial({
  eventDate: DateString,
  eventId: UUID,
  resourceUrl: URLString,
  scheduledFor: DateTimeString,
  timestamp: DateTimeString,
});

export type EventPartial = t.TypeOf<typeof EventPartialCodec>;

