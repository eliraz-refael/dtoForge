name: Publish to NPM

on:
  workflow_run:
    workflows: ["Release"]
    types: [completed]
    branches: [main, master]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.1.0)'
        required: true
        type: string
      release_tag:
        description: 'GitHub release tag (e.g., v1.1.0)'
        required: true
        type: string

jobs:
  publish-single-package:
    name: Publish Single DtoForge Package
    runs-on: ubuntu-latest
    environment: production
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Get release version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TAG="${{ github.event.inputs.release_tag }}"
        else
          # Get the latest release
          RELEASE_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
          VERSION=${RELEASE_TAG#v}
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "Publishing version: $VERSION from release: $RELEASE_TAG"

    - name: Download all platform binaries
      run: |
        mkdir -p npm-package/binaries
        cd npm-package/binaries

        # Download all platform binaries
        platforms=(
          "dtoForge-linux-amd64:linux-x64"
          "dtoForge-linux-arm64:linux-arm64"
          "dtoForge-darwin-amd64:darwin-x64"
          "dtoForge-darwin-arm64:darwin-arm64"
          "dtoForge-windows-amd64.exe:win32-x64.exe"
          "dtoForge-windows-arm64.exe:win32-arm64.exe"
        )

        for platform in "${platforms[@]}"; do
          IFS=':' read -r github_name npm_name <<< "$platform"
          echo "Downloading $github_name as $npm_name..."

          curl -L -o "$npm_name" \
            "https://github.com/eliraz-refael/dtoForge/releases/download/${{ steps.get_version.outputs.release_tag }}/$github_name"

          # Make executable if not Windows
          if [[ "$npm_name" != *.exe ]]; then
            chmod +x "$npm_name"
          fi
        done

        ls -la

    - name: Copy npm files from repo
      run: |
        cd npm-package

        # Copy the install script we already created
        cp ../scripts/npm/install.js .

        # Create package.json from template with version substitution
        export VERSION="${{ steps.get_version.outputs.version }}"
        envsubst < ../scripts/npm/package.json.template > package.json

    - name: Publish to npm
      run: |
        cd npm-package
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Summary
      run: |
        echo "ðŸŽ‰ Successfully published DtoForge v${{ steps.get_version.outputs.version }} to npm!"
        echo "ðŸ“¦ Package: https://www.npmjs.com/package/dtoforge"
        echo "ðŸ’¾ Install: npm install -g dtoforge"
        echo "ðŸš€ Usage: dtoforge -openapi api.yaml -out ./generated"
